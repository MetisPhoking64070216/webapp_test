import streamlit as st
import pandas as pd
import openpyxl
from openpyxl.drawing.image import Image
import os
import tempfile
import time

def process_excel(before_file_path, template_file_path, selected_columns, cell_positions, split_column, split_method):
    df = pd.read_excel(before_file_path, skiprows=5)

    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏à‡∏∏‡∏î‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°
    for col in df.columns:
        if df[col].dtype == 'float64':  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°
            # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πà‡∏≤ NaN ‡∏î‡πâ‡∏ß‡∏¢ 0 ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Int64
            df[col] = df[col].fillna(0).astype('Int64')  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏° (Int64 ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ NaN ‡πÑ‡∏î‡πâ)

    # ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡πâ split ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    if split_column and split_method:
        if split_column in df.columns:
            if split_method == "Remove Numbers":
                # ‡πÅ‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                df[split_column] = df[split_column].str.replace(r'^\d+\s', '', regex=True)

    try:
        wb = openpyxl.load_workbook(template_file_path)
        template_sheet = wb.active
    except Exception as e:
        st.error(f"Error opening template file: {e}")
        return None

    # ‡∏•‡∏ö "Sheet1" ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
    if "Sheet1" in wb.sheetnames:
        wb.remove(wb["Sheet1"])

    # ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å template
    template_images = []
    for image in template_sheet._images:
        temp_img_path = os.path.join(tempfile.gettempdir(), f"temp_img_{len(template_images)}.png")

        with open(temp_img_path, "wb") as img_file:
            img_file.write(image._data())  # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡πâ‡∏ß‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå

        template_images.append((temp_img_path, image.anchor))  # ‡πÄ‡∏Å‡πá‡∏ö path ‡πÅ‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á

    for i, row in df.iterrows():
        store_code = str(row.iloc[1]) if not pd.isna(row.iloc[1]) else "Unknown"
        sheet_name = store_code[:31]  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏µ‡∏ï‡∏ó‡∏µ‡πà 31 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£

        if sheet_name not in wb.sheetnames:
            new_sheet = wb.copy_worksheet(template_sheet)
            new_sheet.title = sheet_name
        else:
            new_sheet = wb[sheet_name]

        # ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô‡πÄ‡∏ã‡∏•‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        for col_name, cell_pos in zip(selected_columns, cell_positions):
            value = row[col_name] if col_name in df.columns else ""
            new_sheet[cell_pos] = value  

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å template ‡∏•‡∏á‡πÑ‡∏õ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ï‡πÉ‡∏´‡∏°‡πà
        for img_path, img_anchor in template_images:
            img = Image(img_path)  # ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
            new_sheet.add_image(img, img_anchor)  # ‡∏ß‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏î‡∏¥‡∏°

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå output
    output_path = os.path.join(tempfile.gettempdir(), "processed_excel.xlsx")
    try:
        wb.save(output_path)
    except Exception as e:
        st.error(f"Error saving the output file: {e}")
        return None

    return output_path

st.title("\U0001F4CA ‡πÉ‡∏ö‡∏õ‡∏∞‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏∞‡∏•‡πà‡∏∞")

before_file = st.file_uploader("Upload before.xlsx", type=["xlsx"])
template_file = st.file_uploader("Upload template.xlsx", type=["xlsx"])

if before_file:
    df = pd.read_excel(before_file, skiprows=5)
    if len(df) > 1:
        column_headers = df.iloc[0].tolist()  # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô row ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô header
        column_options = [f"{col}" for col in df.columns]
    else:
        column_options = list(df.columns)  
else:
    column_options = []

selected_columns_display = st.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", column_options)
selected_columns = [col.split(" (")[0] for col in selected_columns_display]  # ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏à‡∏£‡∏¥‡∏á

cell_positions = [st.text_input(f"‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏ã‡∏•‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {col}", key=col) for col in selected_columns]

# ‡πÄ‡∏û‡∏¥‡πà‡∏° UI ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ split ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£ split
split_column = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ split", column_options)
split_method = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£ split", ["Remove Numbers", "Other Method"])  # ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï

if before_file and selected_columns:
    st.subheader("üîç Preview: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤")
    if len(df) > 1:
        df_prev = df[selected_columns].shift(1)  # ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô 1 ‡πÅ‡∏ñ‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
        df_prev.dropna(inplace=True)  # ‡∏•‡∏ö‡∏Ñ‡πà‡∏≤ NaN ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£ shift
        st.dataframe(df_prev.style.set_properties(**{"background-color": "#f0f0f0", "color": "black"}))
    else:
        st.info("‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤")

if st.button("Generate Excel File"):
    if before_file and template_file and selected_columns and cell_positions:
        temp_dir = tempfile.gettempdir()
        before_file_path = os.path.join(temp_dir, "before.xlsx")
        template_file_path = os.path.join(temp_dir, "template.xlsx")
        
        with open(before_file_path, "wb") as f:
            f.write(before_file.getbuffer())
        with open(template_file_path, "wb") as f:
            f.write(template_file.getbuffer())
        
        time.sleep(1)
        
        output_file = process_excel(before_file_path, template_file_path, selected_columns, cell_positions, split_column, split_method)
        if output_file:
            with open(output_file, "rb") as file:
                st.download_button("Download Processed Excel", file, file_name="processed_excel.xlsx")
    else:
        st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå ‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏ã‡∏•‡∏•‡πå!")
